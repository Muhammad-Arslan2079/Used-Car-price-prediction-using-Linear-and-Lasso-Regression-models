# -*- coding: utf-8 -*-
"""Car price prediction using Linear and Lasso Regression models.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WwGUC7wi6NpxN0wt5dUo1LixOejpoGD2

Importing libraries/dependencies
"""

import numpy as np  # for creating and handling numpy arrays
import pandas as pd  #for loading data and data analysis
import matplotlib.pyplot as plt  # for data visualization
import seaborn as sns # for data visualization
from  sklearn.model_selection import train_test_split  #spliting data into train and test splits
from sklearn.linear_model import LinearRegression  # importing linear regression model
from sklearn.linear_model import Lasso  # importing lasso regression model
from sklearn import metrics  # importing metrics to compare error r sqr and mean absolute error

"""Data collection and processing"""

df=pd.read_csv("/content/car data.csv")  #creating df and loading data by providing path

df.head()  #displaying default first 5 rows

df.info() #cheking data types

df.isnull().sum()  #no missing values

df.shape  #301 rows and 9 columns

# counting how many categories of fearures

df['Fuel_Type'].value_counts()  #counting categories of fuel type

df['Seller_Type'].value_counts() # counting categories of seller type

df['Transmission'].value_counts() # xounting categories of transmission feature

"""descriptive analysis"""

df.describe()  #cheking skweness of data by comparing mean and median 50 percent values(positive or negative skewed?)

"""Encoding the categorical data"""

df.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace=True)  #mapping categories into numbers for fuel type

df.replace({'Seller_Type':{'Dealer':0,'Individual':1}},inplace=True) # mapping categories into number for seller type

df.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace=True) #mapping for transmission type

df.head() #first 5 rows

df['Car_Name'].value_counts()   # counting categories of car name

"""separating data and target"""

#we will set selling price as the target column because we want to predict the price at which car will sell

x=df.drop(columns=['Car_Name','Selling_Price'],axis=1) # droping car name feature and targrt feature selling price
y=df['Selling_Price'] # y contain only target feature values

print(x) # printing x to check values inside
print(y) #printing y target values

"""Spliting data into train test split"""

X_train,X_test,Y_train,Y_test=train_test_split(x,y,test_size=0.1,random_state=2) #spliting data,test data will be 10 percent only as we have only 302 data points

print(X_train.shape)  #checking shape
print(Y_train.shape)
print(X_test.shape)
print(Y_test.shape)

"""Model Training"""

lin_reg_model= LinearRegression() #storing model in variable
lin_reg_model.fit(X_train,Y_train) # training model

"""Evaluating linear regression model"""

# Training data evaluation

X_train_prediction_lin_reg_model= lin_reg_model.predict(X_train) #predicting price for training data and storing into variables
# Using r squared metrics to find error
r_squared_score_lin_reg_model= metrics.r2_score(X_train_prediction_lin_reg_model,Y_train)
print('The r squared error is:',r_squared_score_lin_reg_model)

#Using Mean absolute error
mean_absolute_error_lin_reg_model=metrics.mean_absolute_error(X_train_prediction_lin_reg_model,Y_train)
print('Mean_absolute_error:',mean_absolute_error_lin_reg_model)

# Test data evaluation

X_test_prediction_lin_reg_model= lin_reg_model.predict(X_test) # model predicting test data prices
# Using r squared metrics to find error
r_squared_score_lin_reg_model_test_data= metrics.r2_score(X_test_prediction_lin_reg_model,Y_test)
print('The r squared error is:',r_squared_score_lin_reg_model_test_data)

#Using Mean absolute error
mean_absolute_error_lin_reg_model_test_data=metrics.mean_absolute_error(X_test_prediction_lin_reg_model,Y_test)
print('Mean_absolute_error:',mean_absolute_error_lin_reg_model_test_data)

"""Visualizing Actual prices and Predicted prices"""

plt.figure(figsize=(3,3))  #fig size height and width
plt.scatter(Y_train,X_train_prediction_lin_reg_model)  #scatter plot between two numerical variable
plt.grid() # making grid of squared lines
plt.xlabel('Actual prices')  # x axis label
plt.ylabel('Predicted prices') # ya axis label
plt.title('ACTUAL VS PREDICTED CAR PRICES FOR TRAINING DATA')  #title of plot
plt.show() #show plot

"""Visualizing for Test Data"""

plt.figure(figsize=(3,3))
plt.scatter(Y_test,X_test_prediction_lin_reg_model)
plt.grid()
plt.xlabel('Actual prices')
plt.ylabel('Predicted prices')
plt.title('ACTUAL VS PREDICTED CAR PRICES FOR TEST DATA')
plt.show()

"""Training and Testing through Lasso Regression model"""

lasso_reg_model= Lasso()
lasso_reg_model.fit(X_train,Y_train)

"""Evaluating Lasso Regression Model"""

# Training data evaluation

X_train_prediction_lasso_reg_model= lasso_reg_model.predict(X_train)
# Using r squared metrics to find error
r_squared_score_lasso_reg_model= metrics.r2_score(X_train_prediction_lasso_reg_model,Y_train)
print('The r squared error is:',r_squared_score_lasso_reg_model)

#Using Mean absolute error
mean_absolute_error_lasso_reg_model=metrics.mean_absolute_error(X_train_prediction_lasso_reg_model,Y_train)
print('Mean_absolute_error:',mean_absolute_error_lasso_reg_model)

# Test data evaluation

X_test_prediction_lasso_reg_model= lasso_reg_model.predict(X_test)
# Using r squared metrics to find error
r_squared_score_lasso_reg_model_test_data= metrics.r2_score(X_test_prediction_lasso_reg_model,Y_test)
print('The r squared error is:',r_squared_score_lasso_reg_model_test_data)

#Using Mean absolute error
mean_absolute_error_lasso_reg_model_test_data=metrics.mean_absolute_error(X_test_prediction_lasso_reg_model,Y_test)
print('Mean_absolute_error:',mean_absolute_error_lasso_reg_model_test_data)

"""Visualizing Actual prices and Predicted prices"""

plt.figure(figsize=(3,3))
plt.scatter(Y_train,X_train_prediction_lasso_reg_model)
plt.grid()
plt.xlabel('Actual prices')
plt.ylabel('Predicted prices')
plt.title('ACTUAL VS PREDICTED CAR PRICES FOR TRAINING DATA')
plt.show()

"""Visualizing for Test Data"""

plt.figure(figsize=(3,3))
plt.scatter(Y_test,X_test_prediction_lasso_reg_model)
plt.grid()
plt.xlabel('Actual prices')
plt.ylabel('Predicted prices')
plt.title('ACTUAL VS PREDICTED CAR PRICES FOR TEST DATA')
plt.show()

"""Building a Predictive System"""

input_data=(2012,5.980,51439,1,0,0,0)  # input instance of data
input_data_as_numpy_array= np.array(input_data) # converting raw data into numpy array
data_reshaped=input_data_as_numpy_array.reshape(1,-1)  # reshaping instance for model
prediction=lin_reg_model.predict(data_reshaped)  #prediction of reshaped data
print('The Price of Car is',prediction)  #printing prediction

print(X_test)

# Hence we will use lasso regression that is more suitable here because it has less error as compared to linear regression

